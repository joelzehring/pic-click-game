{"version":3,"sources":["components/GameCard/index.js","components/ScoreBoard/index.js","App.js","serviceWorker.js","index.js"],"names":["GameCard","props","className","this","animals","map","animal","id","onClick","handleClick","bind","src","imgLink","alt","name","Component","ScoreBoard","currentScore","animalData","filter","isClicked","length","highScore","App","shuffleCards","newAnimals","sort","Math","random","state","e","index","target","alert","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4zCAqBeA,G,8DAjBb,WAAYC,GAAQ,uCACZA,G,qDAEG,IAAD,OACR,OACA,yBAAKC,UAAU,aACZC,KAAKF,MAAMG,QAAQC,KAAI,SAAAC,GACtB,OACE,yBAAKJ,UAAU,aACb,yBAAKK,GAAKD,EAAOC,GAAKC,QAAU,EAAKP,MAAMQ,YAAYC,KAAK,GAAQC,IAAML,EAAOM,QAAUC,IAAMP,EAAOQ,KAAOZ,UAAU,2B,GAV9Ga,c,MCYRC,MAZf,SAAqBf,GACnB,IACIgB,EADiBhB,EAAMiB,WAAWC,QAAO,SAAAb,GAAM,OAAwB,GAApBA,EAAOc,aAC5BC,OAElC,OACE,yBAAKnB,UAAU,eACb,qCAAU,kCAASe,EAAT,MACV,0CAAe,kCAAShB,EAAMqB,UAAf,Q,OCsDNC,E,kDAzDb,WAAYtB,GAAQ,IAAD,8BACnB,cAAMA,IAgCPuB,aAAc,SAACC,GACdA,EAAWC,MAAM,kBAAMC,KAAKC,SAAW,OAhCvC,EAAKC,MAAQ,CACZP,UAAW,EACXlB,WAGD,EAAKK,YAAc,EAAKA,YAAYC,KAAjB,gBAPA,E,wDAURoB,GACX,IAAIC,EAAQD,EAAEE,OAAOzB,GACjBkB,EAAatB,KAAK0B,MAAMzB,QAGxBqB,EAAWM,GAAOX,WACrBa,MAAM,0BAENR,EAAWpB,KAAI,SAAAC,GAAM,OAAIA,EAAOc,WAAY,MAG5CK,EAAWM,GAAOX,WAAY,EAI/B,IACIH,EADiBd,KAAK0B,MAAMzB,QAAQe,QAAO,SAAAb,GAAM,OAAyB,IAArBA,EAAOc,aAC9BC,OAElClB,KAAKqB,aAAaC,GAElBtB,KAAK+B,SAAU,CAACZ,UAAWL,EAAed,KAAK0B,MAAMP,UAAYL,EAAed,KAAK0B,MAAMP,UAAWlB,QAASqB,M,+BAQ7G,OACE,yBAAKvB,UAAU,OACjB,4BAAQA,UAAU,cACjB,+CAED,8BACC,gIACA,kBAAC,EAAD,CAAYoB,UAAWnB,KAAK0B,MAAMP,UAAWJ,WAAYf,KAAK0B,MAAMzB,UACpE,yBAAKF,UAAU,OACb,kBAAC,EAAD,CAAUO,YAAcN,KAAKM,YAAcL,QAAUD,KAAK0B,MAAMzB,YAGnE,sC,GAnDcW,aCMEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dbfacd41.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./style.css\";\n\nclass GameCard extends Component {\n  constructor(props) {\n    super(props)\n  }\n  render () {\n    return (\n    <div className=\"gameboard\">\n      {this.props.animals.map(animal => {\n        return (\n          <div className='game-card'>\n            <img id={ animal.id } onClick={ this.props.handleClick.bind(this) } src={ animal.imgLink } alt={ animal.name } className=\"img-game-card\" />\n          </div>\n        )\n      })}\n    </div>\n    )\n  }\n}\nexport default GameCard;\n","import React, { Component } from 'react';\nimport './style.css';\n\nfunction ScoreBoard (props) {\n  let clickedAnimals = props.animalData.filter(animal => animal.isClicked == true);\n  let currentScore = clickedAnimals.length;\n\n  return (\n    <div className=\"score-board\">\n      <p>Score: <span> { currentScore } </span></p>\n      <p>High Score: <span> { props.highScore } </span></p>\n    </div>\n  );\n}\n\nexport default ScoreBoard;\n","import React, { Component }  from 'react';\nimport './App.css';\nimport GameCard from \"./components/GameCard/\";\nimport ScoreBoard from './components/ScoreBoard/';\nimport animals from \"./animals.json\";\n\nclass App extends Component {\n  constructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\thighScore: 0,\n\t\t\tanimals\n\t\t}\n\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t}\n\t\n\thandleClick(e) {\n\t\tlet index = e.target.id;\n\t\tlet newAnimals = this.state.animals;\n\n\t\t// If the isClicked status is true, it's game over.\n\t\tif (newAnimals[index].isClicked) { \n\t\t\talert(`Game Over!\\nTry again!`);\n\t\t\t// Reset isClicked values of all animals to false\n\t\t\tnewAnimals.map(animal => animal.isClicked = false);\n\t\t} else {\n\t\t\t// Set the isClicked value of the clicked animal to true\n\t\t\tnewAnimals[index].isClicked = true;\n\t\t}\n\t\t\n\t\t// Tally the animals that have an isClicked value of true and set that number to the current score\n\t\tlet clickedAnimals = this.state.animals.filter(animal => animal.isClicked === true);\n\t\tlet currentScore = clickedAnimals.length;\n\n\t\tthis.shuffleCards(newAnimals);\n\t\t// If the current score exceeds the high score, update the high score and update the animals object with new clicked values for the next round\n\t\tthis.setState( {highScore: currentScore > this.state.highScore ? currentScore : this.state.highScore, animals: newAnimals} );\n\t}\n\n\tshuffleCards =(newAnimals) => {\n\t\tnewAnimals.sort( () => Math.random() - 0.5);\n\t}\n  \n  render () {\n    return (\n      <div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<h1>Pic Click Game</h1>\n\t\t\t\t</header>\n\t\t\t\t<main>\n\t\t\t\t\t<p>Click a picture to increase your score, but don't click the same picture twice or it's game over!</p>\n\t\t\t\t\t<ScoreBoard highScore={this.state.highScore} animalData={this.state.animals} />\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<GameCard handleClick={ this.handleClick } animals={ this.state.animals } />\n\t\t\t\t\t</div>\n\t\t\t\t</main>\n\t\t\t\t<footer>\n\t\t\t\t</footer>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}